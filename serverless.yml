service:
    name: serverless-udagram-app
plugins:
  - serverless-webpack
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation
frameworkVersion: '2'
provider: 
    name: aws
    runtime: nodejs12.x
    stage: ${opt:stage,'dev'} 
    region: ${opt:region,'us-east-1'}
    environment: 
        GROUPS_TABLE: Groups-${self:provider.stage}
        IMAGES_TABLE: Images-${self:provider.stage}
        IMAGE_ID_INDEX: ImageIdIndex
        IMAGES_S3_BUCKET: serverless-udagram-images-lol-${self:provider.stage}
        CONNECTIONS_TABLE: Connections-${self:provider.stage}
        SIGNED_URL_EXPIRATION: 300
    iamRoleStatements:
        - Effect: Allow
          Action:
            - s3:GetObject
            - s3:PutObject
          Resource: arn:aws:s3:::{self:provider.environment.IMAGES_S3_BUCKET}/*
        - Effect: Allow
          Action:
            - dynamodb:Scan
            - dynamodb:PutItem
            - dynamodb:GetItem
          Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.GROUPS_TABLE}
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:PutItem
          Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.IMAGES_TABLE}
        - Effect: Allow
          Action:
            - dynamodb:Scan
            - dynamodb:PutItem
            - dynamodb:DeleteItem
          Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CONNECTIONS_TABLE}
        - Effect: Allow
          Action:
            - dynamodb:Query
          Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.IMAGES_TABLE}/index/${self:provider.environment.IMAGE_ID_INDEX}
functions:
    SendUploadNotification:
      handler: src/lambda/s3/sendNotifications.handler
      environment: #enviornment variable specifically for the this lambda function
        STAGE: ${self:provider.stage} 
        API_ID:
          Ref: WebsocketsApi  #api id for websocket api
      events:
        - s3:
           bucket: ${self:provider.environment.IMAGES_S3_BUCKET}
           event: s3:ObjectCreated:*
           existing: true
      
    ConnectHandler:
      handler: src/lambda/websocket/connect.handler
      events:
        - websocket:
            route: $connect
    DisconnectHandler:
      handler: src/lambda/websocket/disconnect.handler
      events:
        - websocket:
            route: $disconnect
    GetGroups:
        handler: src/lambda/http/getGroups.handler
        events:
            - http:
                method: get
                path: groups
                cors: true
    CreateGroup: 
        handler: src/lambda/http/createGroup.handler
        events:
          - http:
              method: post
              path: groups   
              cors: true  
              reqValidatorName: RequestBodyValidator
              documentation:
                summary: Create a new group
                description: Create a new group
                requestModels:
                  'application/json': GroupRequest     
    GetImages:
        handler: src/lambda/http/getImages.handler
        events:
          - http:
              method: get
              path: groups/{groupId}/images
              cors: true
    GetImage:
        handler: src/lambda/http/getImage.handler
        events:
          - http:
              method: get
              path: images/{imageId}
              cors: true
    CreateImage:
        handler: src/lambda/http/createImage.handler
        events:
          - http:
              method: post
              path: groups/{groupId}/images
              cors: true
              reqValidatorName: RequestBodyValidator
              documentation:
                summary: Create a image
                description: Create a image
                requestModels:
                  'application/json': ImageRequest  
    SyncWithElasticsearch:
      handler: src/lambda/dynamoDb/elasticSearchSync.handler
      events:
        - stream:
            type: dynamodb
            arn: !GetAtt ImagesDynamoTable.StreamArn
custom:
  webpack:
    webpackConfig: ./webpack.config.js 
    includeModules: true
  documentation:
    api:
      info:
        version: v1.0.0 #current version of the api
        title: Udagram api
        description: Serverless application for image sharing
    models:
      - name: GroupRequest
        contentType: application/json
        schema: ${file(models/create-group-request.json)}
      - name: ImageRequest
        contentType: application/json
        schema: ${file(models/create-image-request.json)}
resources:
    Resources:
        WebSocketConnectionsDynamoDBTable:
          Type: AWS::DynamoDB::Table
          Properties:
            AttributeDefinitions:
              -
                AttributeName: id
                AttributeType: S
            KeySchema:
              -
                AttributeName: id
                KeyType: HASH
            BillingMode: PAY_PER_REQUEST
            TableName: ${self:provider.environment.CONNECTIONS_TABLE}
        AttachmentsBucket:
          Type: AWS::S3::Bucket
          Properties:
            BucketName: ${self:provider.environment.IMAGES_S3_BUCKET}
            CorsConfiguration:
              CorsRules:
                -
                  AllowedOrigins:
                    - '*'
                  AllowedHeaders:
                    - '*'
                  AllowedMethods:
                    - GET
                    - PUT
                    - POST
                    - DELETE
                    - HEAD
                  MaxAge: 3000
        BucketPolicy:
          Type: AWS::S3::BucketPolicy
          Properties:
            PolicyDocument:
              Id: MyPolicy
              Version: "2012-10-17"
              Statement:
                - Sid: PublicReadForGetBucketObjects
                  Effect: Allow
                  Principal: '*'
                  Action: 's3:GetObject'
                  Resource: 'arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*'
            Bucket: !Ref AttachmentsBucket
        RequestBodyValidator:
          Type: AWS::ApiGateway::RequestValidator  
          Properties:
            Name: 'request-body-validator'
            RestApiId:
              Ref: ApiGatewayRestApi #ApiGatewayRestApi is the logical name of the resource
            ValidateRequestBody: true
            ValidateRequestParameters: false
        GroupsDynamoTable:
            Type: AWS::DynamoDB::Table
            Properties:
                AttributeDefinitions:
                    - AttributeName: id
                      AttributeType: S
                KeySchema:
                    - AttributeName: id
                      KeyType: HASH
                BillingMode: PAY_PER_REQUEST
                TableName: ${self:provider.environment.GROUPS_TABLE}
        ImagesDynamoTable:
            Type: AWS::DynamoDB::Table
            Properties:
                AttributeDefinitions:
                    - AttributeName: groupId
                      AttributeType: S
                    - AttributeName: timeStamp
                      AttributeType: S
                    - AttributeName: imageId
                      AttributeType: S
                KeySchema:
                  - AttributeName: groupId
                    KeyType: HASH  #partition key
                  - AttributeName: timeStamp
                    KeyType: RANGE #sortkey
                GlobalSecondaryIndexes:
                  - IndexName: ${self:provider.environment.IMAGE_ID_INDEX}
                    KeySchema:
                    - AttributeName: imageId
                      KeyType: HASH
                    Projection:
                      ProjectionType: ALL #what all values need to be copied from the table to index ,since we have value ALL current then all values will be copied in the index
                BillingMode: PAY_PER_REQUEST
                TableName: ${self:provider.environment.IMAGES_TABLE}
                StreamSpecification: # stream on dynamo table
                  StreamViewType: NEW_IMAGE #te stream should only contains updated records only 
