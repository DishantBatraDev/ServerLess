service:
    name: serverless-udagram-app
plugins:
  - serverless-webpack
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation
frameworkVersion: '2'
provider: 
    name: aws
    runtime: nodejs12.x
    stage: ${opt:stage,'dev'} 
    region: ${opt:region,'us-east-1'}
    environment: 
        GROUPS_TABLE: Groups-${self:provider.stage}
        IMAGES_TABLE: Images-${self:provider.stage}
        IMAGE_ID_INDEX: ImageIdIndex
        IMAGES_S3_BUCKET: serverless-udagram-images-1-${self:provider.stage}
        CONNECTIONS_TABLE: Connections-${self:provider.stage}
        SIGNED_URL_EXPIRATION: 300
    iamRoleStatements:
        - Effect: Allow
          Action:
            - s3:PutObject
            - s3:GetObject
          Resource: arn:aws:s3:::{self:provider.environment.IMAGES_S3_BUCKET}/*
        - Effect: Allow
          Action:
            - dynamodb:Scan
            - dynamodb:PutItem
            - dynamodb:GetItem
          Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.GROUPS_TABLE}
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:PutItem
          Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.IMAGES_TABLE}
        - Effect: Allow
          Action:
            - dynamodb:Scan
            - dynamodb:PutItem
            - dynamodb:DeleteItem
          Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CONNECTIONS_TABLE}
        - Effect: Allow
          Action:
            - dynamodb:Query
          Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.IMAGES_TABLE}/index/${self:provider.environment.IMAGE_ID_INDEX}
functions:
    SendUploadNotification:
      handler: src/lambda/s3/sendNotifications.handler
      environment: #enviornment variable specifically for the this lambda function
        STAGE: ${self:provider.stage} 
        API_ID:
          Ref: WebsocketsApi  #api id for websocket api
      events:
        - sns:
            arn:
              Fn::Join:
                - ':'
                - - arn:aws:sns
                  - Ref: AWS::Region
                  - Ref: AWS::AccountId
                  - ${self:custom.topicName}
            topicName: ${self:custom.topicName}
      
    ConnectHandler:
      handler: src/lambda/websocket/connect.handler
      events:
        - websocket:
            route: $connect
    DisconnectHandler:
      handler: src/lambda/websocket/disconnect.handler
      events:
        - websocket:
            route: $disconnect
    GetGroups:
        handler: src/lambda/http/getGroups.handler
        events:
            - http:
                method: get
                path: groups
                cors: true
    CreateGroup: 
        handler: src/lambda/http/createGroup.handler
        events:
          - http:
              method: post
              path: groups   
              cors: true  
              reqValidatorName: RequestBodyValidator
              documentation:
                summary: Create a new group
                description: Create a new group
                requestModels:
                  'application/json': GroupRequest     
    GetImages:
        handler: src/lambda/http/getImages.handler
        events:
          - http:
              method: get
              path: groups/{groupId}/images
              cors: true
    GetImage:
        handler: src/lambda/http/getImage.handler
        events:
          - http:
              method: get
              path: images/{imageId}
              cors: true
    CreateImage:
        handler: src/lambda/http/createImage.handler
        events:
          - http:
              method: post
              path: groups/{groupId}/images
              cors: true
              reqValidatorName: RequestBodyValidator
              documentation:
                summary: Create a image
                description: Create a image
                requestModels:
                  'application/json': ImageRequest  
    SyncWithElasticsearch:
      handler: src/lambda/dynamoDb/elasticSearchSync.handler
      events:
        - stream:
            type: dynamodb
            arn: !GetAtt ImagesDynamoTable.StreamArn
      iamRoleStatements:
        - Effect: Allow
          Action:
            - ec2:DescribeNetworkInterfaces
            - ec2:CreateNetworkInterface
            - ec2:DeleteNetworkInterface
            - ec2:DescribeInstances
            - ec2:AttachNetworkInterface
          Resource: '*'
      environment:
        ES_ENDPOINT: !GetAtt ImageSearch.DomainEndpoint
      vpc:
        subnetIds:
          - !Ref ElasticSubnetA
        securityGroupIds:
          - !Ref ElasticSecurityGroup

custom:
  topicName: imagesTopic-${self:provider.stage}
  webpack:
    webpackConfig: ./webpack.config.js 
    includeModules: true
  documentation:
    api:
      info:
        version: v1.0.0 #current version of the api
        title: Udagram api
        description: Serverless application for image sharing
    models:
      - name: GroupRequest
        contentType: application/json
        schema: ${file(models/create-group-request.json)}
      - name: ImageRequest
        contentType: application/json
        schema: ${file(models/create-image-request.json)}
resources:
    Resources:
        ImagesTopic:
          Type: AWS::SNS::Topic
          Properties:
            DisplayName: Image bucket topic
            TopicName: ${self:custom.topicName}
        SNSTopicPolicy: #This policy allow s3 to send events to this topic
          Type: AWS::SNS::TopicPolicy
          Properties:
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Principal:
                    AWS: '*'
                  Action: sns:Publish # only allows our S3 bucket to this as we specify condition below  
                  Resource:
                    !Ref ImagesTopic
                  Condition:
                    ArnLike: 
                      AWS:SourceArn: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}
            Topics:
              - !Ref ImagesTopic
        ElasticVPC:
          Type: AWS::EC2::VPC
          Properties:
            CidrBlock: "10.0.0.0/16"
            EnableDnsSupport: "true"
            EnableDnsHostnames: "true"
            Tags:
              - Key: Name
                Value: dynamodb-streams-vpc
        InternetGateway:
          Type: AWS::EC2::InternetGateway
          Properties:
            Tags:
              - Key: Name
                Value: dynamodb-stream-internet-gateway
        ElasticVPCGatewayAttachment:
          Type: AWS::EC2::VPCGatewayAttachment
          Properties:
            InternetGatewayId: 
              Ref: InternetGateway
            VpcId:
              Ref: ElasticVPC
        ElasticRouteTable:
          Type: AWS::EC2::RouteTable
          Properties:
            VpcId: 
              Ref: ElasticVPC
        ElasticRoute:
          Type: AWS::EC2::Route
          DependsOn: ElasticVPCGatewayAttachment
          Properties:
            RouteTableId: 
              Ref: ElasticRouteTable
            DestinationCidrBlock: 0.0.0.0/0
            GatewayId: 
              Ref: InternetGateway
        ElasticSubnetA:
          DependsOn: ElasticVPC
          Type: AWS::EC2::Subnet
          Properties:
            VpcId:
              Ref: ElasticVPC
            AvailabilityZone: ${self:provider.region}a
            CidrBlock: "10.0.2.0/24"
            Tags:
              - Key: Name
                Value: dynamodb-streams-subnet    
        ElasticSecurityGroup:
          DependsOn: ElasticVPC
          Type: AWS::EC2::SecurityGroup
          Properties:
            GroupDescription: SecurityGroup for Elasticsearch
            VpcId:
              Ref: ElasticVPC
            SecurityGroupIngress: 
              - FromPort: 443
                IpProtocol: tcp
                ToPort: 443
                CidrIp: 0.0.0.0/0
              - FromPort: 22
                IpProtocol: tcp
                ToPort: 22
                CidrIp: 0.0.0.0/0
              - FromPort: 80
                IpProtocol: tcp
                ToPort: 80
                CidrIp: 0.0.0.0/0
            Tags:
              - Key: Name
                Value: dynamodb-streams-sg
        ElasticStreamRole:
          Type: 'AWS::IAM::ServiceLinkedRole'
          Properties:
            AWSServiceName: es.amazonaws.com
            Description: 'Role for ES to access resources in my VPC'
        ImageSearch:
          Type: AWS::Elasticsearch::Domain
          Properties:
            ElasticsearchVersion: '7.7'
            DomainName: images-search-${self:provider.stage}
            ElasticsearchClusterConfig:
              DedicatedMasterEnabled: false
              InstanceCount: 1
              ZoneAwarenessEnabled: false
              InstanceType: m5.large.elasticsearch
            EBSOptions:
              EBSEnabled: true
              Iops: 0
              VolumeSize: 10
              VolumeType: 'gp2'
            DomainEndpointOptions:
              EnforceHTTPS: false
            AccessPolicies:
              Version: '2012-10-17'
              Statement:
                -
                  Effect: Allow
                  Principal:
                    AWS: '*'
                  Action: es:ESHttp*
                  Resource: '*'
            VPCOptions:
              SubnetIds:
                - !Ref ElasticSubnetA
              SecurityGroupIds:
                - !Ref ElasticSecurityGroup
        WebSocketConnectionsDynamoDBTable:
          Type: AWS::DynamoDB::Table
          Properties:
            AttributeDefinitions:
              -
                AttributeName: id
                AttributeType: S
            KeySchema:
              -
                AttributeName: id
                KeyType: HASH
            BillingMode: PAY_PER_REQUEST
            TableName: ${self:provider.environment.CONNECTIONS_TABLE}
        AttachmentsBucket:
          Type: AWS::S3::Bucket
          DependsOn: SNSTopicPolicy
          Properties:
            NotificationConfiguration:
              TopicConfigurations:
                - Event: s3:ObjectCreated:Put
                  Topic: !Ref ImagesTopic
            BucketName: ${self:provider.environment.IMAGES_S3_BUCKET}
            CorsConfiguration:
              CorsRules:
                -
                  AllowedOrigins:
                    - '*'
                  AllowedHeaders:
                    - '*'
                  AllowedMethods:
                    - GET
                    - PUT
                    - POST
                    - DELETE
                    - HEAD
                  MaxAge: 3000
        BucketPolicy:
          Type: AWS::S3::BucketPolicy
          Properties:
            PolicyDocument:
              Id: MyPolicy
              Version: "2012-10-17"
              Statement:
                - Sid: PublicReadForGetBucketObjects
                  Effect: Allow
                  Principal: '*'
                  Action: 's3:GetObject'
                  Resource: 'arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*'
            Bucket: !Ref AttachmentsBucket
        RequestBodyValidator:
          Type: AWS::ApiGateway::RequestValidator  
          Properties:
            Name: 'request-body-validator'
            RestApiId:
              Ref: ApiGatewayRestApi #ApiGatewayRestApi is the logical name of the resource
            ValidateRequestBody: true
            ValidateRequestParameters: false
        GroupsDynamoTable:
            Type: AWS::DynamoDB::Table
            Properties:
                AttributeDefinitions:
                    - AttributeName: id
                      AttributeType: S
                KeySchema:
                    - AttributeName: id
                      KeyType: HASH
                BillingMode: PAY_PER_REQUEST
                TableName: ${self:provider.environment.GROUPS_TABLE}
        ImagesDynamoTable:
            Type: AWS::DynamoDB::Table
            Properties:
                AttributeDefinitions:
                    - AttributeName: groupId
                      AttributeType: S
                    - AttributeName: timeStamp
                      AttributeType: S
                    - AttributeName: imageId
                      AttributeType: S
                KeySchema:
                  - AttributeName: groupId
                    KeyType: HASH  #partition key
                  - AttributeName: timeStamp
                    KeyType: RANGE #sortkey
                GlobalSecondaryIndexes:
                  - IndexName: ${self:provider.environment.IMAGE_ID_INDEX}
                    KeySchema:
                    - AttributeName: imageId
                      KeyType: HASH
                    Projection:
                      ProjectionType: ALL #what all values need to be copied from the table to index ,since we have value ALL current then all values will be copied in the index
                BillingMode: PAY_PER_REQUEST
                TableName: ${self:provider.environment.IMAGES_TABLE}
                StreamSpecification: # stream on dynamo table
                  StreamViewType: NEW_IMAGE #te stream should only contains updated records only 
